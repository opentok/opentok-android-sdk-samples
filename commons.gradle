import groovy.io.FileType

/*
Dependency versions
*/
ext {
    extAgpVersion="4.1.2"
    extCompileSdkVersion=30
    extBuildToolsVersion="30.0.2"
    extMinSdkVersion=16
    extTargetSdkVersion=28
    extVersionCode=1
    extVersionName="1.0"
    extMinifyEnabled=false
    extOpentokSdkVersion="2.18.+"

    extAppCompatVersion="1.2.0"
    extEasyPermissionsVersion="3.0.0"
    extConstraintLyoutVersion="2.0.4"
    extArCoreVersion="1.22.0"
    extSceneFormVersion="1.17.1"
    extRetrofitVersion="2.9.0"
    extOkHttpVersion="4.8.1"
    extRetrofit2ConverterMoshi="2.8.2"
    extOkHttpLoggingInterceptor="4.9.0"
}

/*
Verify corecntess of the project
*/
task checkProject() { 
    dependsOn 'checkOpenTokConfig'
    dependsOn 'checkServerConfig'
}

/*
Look for the `OpenTokConfig` file and verify if there are no hardcoded values.
This task prevents from putting credentials.
*/
task checkOpenTokConfig() {
    doLast {
        def dir = new File('.')

        dir.eachFileRecurse (FileType.FILES) { file ->
            if(file.name == "OpenTokConfig.java") {
                isPropertyEmpty(file, "API_KEY")
                isPropertyEmpty(file, "SESSION_ID")
                isPropertyEmpty(file, "TOKEN")
            }
        }
    }
}

/*
Look for the `ServerConfig` file and verify if there are no hardcoded values.
This task prevents from putting custom server URL.
*/
task checkServerConfig() {
    doLast {
        def dir = new File('.')
        
        dir.eachFileRecurse (FileType.FILES) { file ->
            if(file.name == "ServerConfig.java") {
                isPropertyEmpty(file, "CHAT_SERVER_URL")
            }
        }
    }
}

def isPropertyEmpty(file, propertyName) {
    file.eachLine { line ->
        // If property exists within config file it must be an empty String
        if (line.contains("public static final String $propertyName") && !line.contains('""')) {
            throw new Exception("Opentok config property is not empty: ${line}")
        }
    }
}
